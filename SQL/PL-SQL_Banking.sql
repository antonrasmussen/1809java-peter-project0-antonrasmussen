--SEQUENCE USED TO AUTO INCREMENT
CREATE SEQUENCE ACCOUNT_SEQ
  START WITH 1
  INCREMENT BY 1;
  
--TRIGGER THAT WILL INCREMENT THE SEQUENCE
--AND ALTER THE PRIMARY KEY VALUE OF AN INSERT
CREATE OR REPLACE TRIGGER ACCOUNT_INSERT
BEFORE INSERT
ON ACCOUNT
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  --IF YOU DON'T WANT USERS TO INSERT ANY VALUE TO THE PK
  --COLUMN, REMOVE THE IF STATEMENT.
  IF :NEW.A_ACCOUNT_NUMBER IS NULL THEN
    SELECT ACCOUNT_SEQ.NEXTVAL INTO :NEW.A_ACCOUNT_NUMBER FROM DUAL;
  END IF;

  SELECT GET_ACCOUNT_HASH(:NEW.A_ACCOUNT_TYPE, :NEW.A_ACCOUNT_STATUS) INTO :NEW.ACCOUNT_HASH FROM DUAL;
END;
/

--HASHING FUNCTION (Uses MD5)
CREATE OR REPLACE FUNCTION GET_ACCOUNT_HASH (ACCT_TYPE VARCHAR2, STATUS VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => ACCT_TYPE || STATUS || EXTRA)));
END;
/

--USED FOR CALLABLE STATEMENT IN JDBC
CREATE OR REPLACE PROCEDURE INSERT_ACCOUNT (TYPE VARCHAR2, STATUS VARCHAR2, BALANCE NUMBER, CUSTOMER_ID  NUMBER)
AS
BEGIN
  INSERT INTO ACCOUNT VALUES(NULL, TYPE, STATUS, BALANCE, CUSTOMER_ID, NULL);
  COMMIT;
END;
/